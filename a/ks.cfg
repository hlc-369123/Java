install
text
cdrom
keyboard us
lang en_US.UTF-8
rootpw --iscrypted $6$16_CHARACTER_SAL$nObkN5FEt8PsNGxcRbh3EqcWOwfb31rdQ9HhZkBa9XxGVDXSxSt337qIR.Ue13R/ifaruoBVOByn8BpsiIPFb.
auth --useshadow --passalgo=sha512
services --enabled="chronyd"
firewall --disabled
selinux --disabled
skipx
reboot
timezone Asia/Shanghai
zerombr

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%include /tmp/part-include
%include /tmp/bootloader-include

%pre --log=/tmp/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }

check_parted() {
	local check_drive="$1"
	if parted -s /dev/$check_drive print &>/dev/null ; then
		echo
		echo "$check_drive drive contains partition table:"
		parted -s /dev/$check_drive print
		echo
		read -p "Are you sure you want to erase ALL data on disk $check_drive? (y/N)" confirm_format
		if [[ "$confirm_format" == "y" ]] || [[ "$confirm_format" == "Y" ]] || [[ "$forceformat" == "yes" ]]; then
			return 0
		else
			return 1
		fi
	else
		return 0
	fi
}

target=""
targets=""
target_count=0
drives=""
drv_dir="/sys/block"

tmp="/tmp/drives"
tmp_targets="/tmp/target_drives"
echo "Drive|Size|Model|Vendor" > $tmp
echo "Drive|Size|Model|Vendor" > $tmp_targets

for drv in `ls -1 $drv_dir | grep "sd\|hd\|vd"`; do
	rmable=`cat ${drv_dir}/${drv}/removable`
	if [[ $rmable == 0 ]]; then
		if [[ -z $drives ]]; then
			drives=$drv
		else
			drives="${drives} ${drv}"
		fi
		size=$((`cat ${drv_dir}/${drv}/size`/2**21))
		model=`cat ${drv_dir}/${drv}/device/model`
		vendor=`cat ${drv_dir}/${drv}/device/vendor`
		echo "${drv}|${size}|${model}|${vendor}" >> $tmp
		min=$(( 10 * 9 / 10 ))
		max=$(( 10 * 11 / 10 ))
		if [[ $size -le $max ]] && [[ $size -gt $min ]]; then
			target=$drv
			let target_count++
			if [[ -z $targets ]]; then
				targets=$drv
			else
				targets="${targets} ${drv}"
			fi
			plog "Found available target dirve $drv."
			echo "${drv}|${size}|${model}|${vendor}" >> $tmp_targets
		fi
	fi
done

if [[ -z $drives ]]; then
	rm -f $tmp
	rm -f $tmp_targets
	clear
	echo
	echo '******************************************************************'
	echo '*                           E R R O R                            *'
	echo '*                                                                *'
	echo '*           Not found possible drive for installation.           *'
	echo '*            Please check the storage and try again.             *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	read -p "Press Enter to restart: " _
	reboot
fi

if [[ $target_count -gt 1 ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*           Found multiple installation target drives.           *'
	echo '*          Please select one from the following drives.          *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "Available drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp_targets
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($targets): " target
		for drv in ${targets[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ -z $target ]] ; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*            No default installation target drive.               *'
	echo '*     Please select one from the following Possible drives.      *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "All possible drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($drives): " target
		for drv in ${drives[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ "check" == "uncheck" ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	if ! check_parted $target ; then
		clear
		echo
		echo '******************************************************************'
		echo '*                           E R R O R                            *'
		echo '*                                                                *'
		echo '*           Target disk contains active partition(s).            *'
		echo '*       Installation can not continue without confirmation.      *'
		echo '*                                                                *'
		echo '******************************************************************'
		echo
		read -p "Press Enter to restart: " _
		reboot
	fi
	chvt 1
fi

echo > /tmp/part-include
echo "clearpart --drives=${target} --all --initlabel" >> /tmp/part-include
echo "part /boot --fstype=xfs --ondisk=${target} --size=1024" >> /tmp/part-include
echo "part / --fstype=xfs --ondisk=${target} --size=1 --grow" >> /tmp/part-include

# Make MBR support to 2TB above
div=`grep ${target} ${tmp} | awk -F '|' '{print $2}'`
if [ $div -ge 2048 ]; then
        echo "part biosboot --fstype=biosboot --ondisk=${target} --size=2" >> /tmp/part-include
fi

# bootloader --location=mbr --driveorder=sdX
echo "bootloader --append=' crashkernel=auto' --location=mbr --boot-drive=${target}" > /tmp/bootloader-include

rm -f $tmp
rm -f $tmp_targets

plog "End of prepare script."
%end

%packages
@^infrastructure-server-environment
@base
@compat-libraries
@core
@development
kexec-tools

%end

%post --log=/tmp/install/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }
plog "Stop NetworkManager"
systemctl stop NetworkManager
systemctl disable NetworkManager
plog "Stop abrtd"
systemctl stop abrtd
systemctl disable --now abrtd
systemctl disable --now abrt-ccpp.service
plog "Enable Network"
systemctl enable network
plog "SSH optimization"
sed -i "s/.*StrictHostKeyChecking ask.*/StrictHostKeyChecking no/" /etc/ssh/ssh_config
sed -i "s/.*UseDNS.*/UseDNS no/" /etc/ssh/sshd_config
sed -i "s/.*GSSAPIAuthentication.*/GSSAPIAuthentication no/" /etc/ssh/sshd_config
systemctl restart sshd
plog "End of post script."
%end
